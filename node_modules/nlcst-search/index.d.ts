/**
 * @param {Node} tree
 * @param {PhrasesList|PhrasesMap} phrases
 * @param {Handler} handler
 * @param {AllowApostrophes|SearchOptions} [options=false]
 */
export function search(
  tree: Node,
  phrases: PhrasesList | PhrasesMap,
  handler: Handler,
  options?: boolean | SearchOptions | undefined,
): void;
export type UnistParent = import("unist").Parent;
export type Root = import("nlcst").Root;
export type Word = import("nlcst").Word;
export type Content = import("nlcst").Content;
export type Node = Root | Content;
export type Parent = Extract<Node, UnistParent>;
export type NormalizeOptions = import("nlcst-normalize").NormalizeOptions;
export type AllowApostrophes = boolean;
export type SearchOptions = NormalizeOptions & {
  allowLiterals?: boolean;
};
export type PhrasesList = Array<string>;
export type PhrasesMap = {
  [x: string]: unknown;
};
export type Handler = (
  nodes: Content[],
  index: number,
  parent: Parent,
  pattern: string,
) => void;
